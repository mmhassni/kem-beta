# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these 
#    https://github.com/Azure/login#configure-a-service-principal-with-a-federated-credential-to-use-oidc-based-authentication):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - SECRET_NAME (name of the secret associated with pulling your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_NAME: "kumojincr"
  CLUSTER_NAME: "gestion-evenement"
  CLUSTER_RESOURCE_GROUP: "utilitaire"
  NAMESPACE: "ingress-basic"
  BACKEND_APP_NAME: "kem-api"
  FRONTEND_APP_NAME: "kem-ui"
  SECRET: "docker-image-pull-secret"
  K8S_RESOURCE_GROUP: "utilitaire"
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@main
    
    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build to a Azure Container Registry (ACR) Backend
    - name: docker build
      run: docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ github.sha }}
    
    # Container build to a Azure Container Registry (ACR) Backend
    - name: docker push
      run: docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ github.sha }}

    # Container build to a Azure Container Registry (ACR) Frontend
    - name: docker build
      run: docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONTEND_APP_NAME }}:${{ github.sha }}
    
    # Container build to a Azure Container Registry (ACR) Frontend
    - name: docker push
      run: docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONTEND_APP_NAME }}:${{ github.sha }}
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.K8S_RESOURCE_GROUP }}
  
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        # Container registry url
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        # Container registry username
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        # Container registry password
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1.4
      with:
        # Path to the manifest files which will be used for deployment.
        manifests: |
          kubernetes/deployment.yml
          kubernetes/service.yml
        # kubernetes/ingress.yml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test  
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ github.sha }}
        # ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONTEND_APP_NAME }}:${{ github.sha }}
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        #route-method: ingress
        action: deploy
        #force: true
